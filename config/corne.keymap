/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        dual_shift: dual_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "DUAL_SHIFT";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;
        };

        dual_tab: dual_tab {
            compatible = "zmk,behavior-tap-dance";
            label = "DUAL_TAB";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp LS(TAB)>;
        };

        dual_raise: dual_raise {
            compatible = "zmk,behavior-tap-dance";
            label = "DUAL_RAISE";
            #binding-cells = <0>;
            bindings = <&sl 2>, <&mo 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE   &kp Q  &kp W  &kp E         &kp R  &kp T        &kp Y    &kp U        &kp I          &kp O    &kp P     &kp BSPC
&dual_tab    &kp A  &kp S  &kp D         &kp F  &kp G        &kp H    &kp J        &kp K          &kp L    &kp SEMI  &kp SQT
&dual_shift  &kp Z  &kp X  &kp C         &kp V  &kp B        &kp N    &kp M        &kp COMMA      &kp DOT  &kp FSLH  &sk RIGHT_CONTROL
                           &kp LEFT_ALT  &mo 1  &kp SPACE    &kp RET  &dual_raise  &sk RIGHT_GUI
            >;
        };

        lower {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans                &kp N1        &kp N2            &kp N3        &kp N4      &kp N5                      &kp N6          &kp N7    &kp N8           &kp N9     &kp N0  &kp BSPC
&kp LC(LS(LEFT_ALT))  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_GUI  &kp LSHIFT  &kp LA(LC(LS(LEFT_GUI)))    &kp LEFT_ARROW  &kp DOWN  &kp UP_ARROW     &kp RIGHT  &trans  &kp DEL
&kp K_UNDO            &trans        &trans            &kp K_PASTE   &kp K_COPY  &kp K_CUT                   &kp END         &kp HOME  &kp PAGE_DOWN    &kp PG_UP  &trans  &kp K_REDO
                                                      &none         &trans      &kp SPACE                   &kp RET         &trans    &kp PRINTSCREEN
            >;
        };

        raise {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp PIPE   &kp AMPS   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp STAR   &kp BSPC
&trans  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp BSLH   &kp GRAVE
&trans  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp CARET  &kp TILDE
                          &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        control {
            bindings = <
&none   &none   &none   &bt BT_PRV         &bt BT_NXT       &bt BT_CLR    &kt F1  &kp F4  &kp F7  &kp F10  &none  &kp DELETE
&trans  &trans  &trans  &trans             &trans           &trans        &kp F2  &kp F5  &kp F8  &kp F11  &none  &none
&none   &none   &none   &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE    &kp F3  &kp F6  &kp F9  &kp F12  &none  &out OUT_TOG
                        &none              &trans           &none         &none   &trans  &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        control {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
