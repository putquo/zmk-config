/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        caps: caps {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS";
            #binding-cells = <0>;
            bindings = <&skq LEFT_SHIFT>, <&caps_word>;
        };

        dual_tab: dual_tab {
            compatible = "zmk,behavior-tap-dance";
            label = "DUAL_TAB";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp LS(TAB)>;
        };

        dual_raise: dual_raise {
            compatible = "zmk,behavior-tap-dance";
            label = "DUAL_RAISE";
            #binding-cells = <0>;
            bindings = <&sl 2>, <&mo 2>;
        };

        skq: skq {
            compatible = "zmk,behavior-sticky-key";
            label = "SKQ";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };
    };

    combos {
        compatible = "zmk,combos";

        AMPERSAND_COMB {
            bindings = <&kp AMPERSAND>;
            key-positions = <21 9>;
        };

        PIPE_COMB {
            bindings = <&kp PIPE>;
            key-positions = <33 21>;
        };

        AT_COMB {
            bindings = <&kp AT>;
            key-positions = <2 14>;
        };

        GRAVE_COMB {
            bindings = <&kp GRAVE>;
            key-positions = <26 14>;
        };

        ASTERISK_COMB {
            bindings = <&kp ASTERISK>;
            key-positions = <8 20>;
        };

        SLASH_COMB {
            bindings = <&kp SLASH>;
            key-positions = <20 32>;
        };

        HASH_COMB {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
        };

        BACKSLASH_COMB {
            bindings = <&kp BACKSLASH>;
            key-positions = <15 27>;
        };

        PLUS_COMB {
            bindings = <&kp PLUS>;
            key-positions = <7 19>;
        };

        MINUS_COMB {
            bindings = <&kp MINUS>;
            key-positions = <19 31>;
        };

        DOLLAR_COMB {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
        };

        EQUAL_COMB {
            bindings = <&kp EQUAL>;
            key-positions = <16 28>;
        };

        CARET_COMB {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
        };

        UNDERSCORE_COMB {
            bindings = <&kp UNDER>;
            key-positions = <18 30>;
        };

        PERCENT_COMB {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
        };

        TILDE_COMB {
            bindings = <&kp TILDE>;
            key-positions = <17 29>;
        };

        LEFT_PARENTHESIS_COMBO {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <17 16>;
        };

        LEFT_BRACE_COMBO {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <15 16>;
        };

        LEFT_BRACKET_COMBO {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <14 15>;
        };

        RIGHT_PARENTHESIS_COMBO {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <18 19>;
        };

        RIGHT_BRACE_COMBO {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <19 20>;
        };

        RIGHT_BRACKET_COMBO {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <21 20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE    &kp Q  &kp W  &kp E      &kp R  &kp T        &kp Y  &kp U  &kp I          &kp O    &kp P     &kp BSPC
&kp RET       &kp A  &kp S  &kp D      &kp F  &kp G        &kp H  &kp J  &kp K          &kp L    &kp SEMI  &kp SQT
&kp LEFT_WIN  &kp Z  &kp X  &kp C      &kp V  &kp B        &kp N  &kp M  &kp COMMA      &kp DOT  &kp FSLH  &sk RIGHT_CONTROL
                            &dual_tab  &sl 1  &kp SPACE    &caps  &sl 2  &kp RIGHT_ALT
            >;
        };

        lower {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1       &kp N2            &kp N3        &kp N4       &kp N5                      &kp N6          &kp N7    &kp N8           &kp N9     &kp N0  &kp BSPC
&trans  &kp LA(TAB)  &kp LEFT_CONTROL  &kp LEFT_GUI  &kp LSHIFT   &kp LA(LC(LS(LEFT_GUI)))    &kp LEFT_ARROW  &kp DOWN  &kp UP_ARROW     &kp RIGHT  &trans  &kp DEL
&trans  &trans       &kp K_CUT         &kp K_COPY    &kp K_PASTE  &trans                      &kp END         &kp HOME  &kp PAGE_DOWN    &kp PG_UP  &trans  &kp K_REDO
                                       &none         &trans       &trans                      &trans          &trans    &kp PRINTSCREEN
            >;
        };

        raise {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &kp N6  &kp N7  &kp N8  &trans    &trans  &trans  &trans  &trans  &trans  &kp BSPC
&trans  &trans  &kp N0  &kp N1  &kp N2  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N9  &kp N3  &kp N4  &kp N5  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        control {
            bindings = <
&none   &none   &none   &bt BT_PRV         &bt BT_NXT       &bt BT_CLR    &trans  &kp F9  &kp F10  &kp F11  &kp F12  &kp DELETE
&trans  &trans  &trans  &trans             &trans           &trans        &trans  &kp F5  &kp F6   &kp F7   &kp F8   &none
&none   &none   &none   &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE    &trans  &kp F1  &kp F2   &kp F3   &kp F4   &out OUT_TOG
                        &none              &trans           &none         &none   &trans  &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        control {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
